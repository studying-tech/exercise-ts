name: Auto Grading - TypeScript Utilities

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  grade:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Check project structure
        run: |
          echo "=== Checking TypeScript utilities structure ==="

          # Check essential files
          test -f package.json && echo "✅ package.json exists" || echo "❌ package.json missing"
          test -f tsconfig.json && echo "✅ tsconfig.json exists" || echo "❌ tsconfig.json missing"
          test -f jest.config.js && echo "✅ jest.config.js exists" || echo "⚠️  jest.config.js missing"
          test -f README.md && echo "✅ README.md exists" || echo "❌ README.md missing"

          # Check source structure
          test -d src && echo "✅ src directory exists" || echo "❌ src directory missing"
          test -f src/index.ts && echo "✅ src/index.ts exists" || echo "❌ src/index.ts missing"
          test -d src/utils && echo "✅ src/utils directory exists" || echo "⚠️  src/utils directory missing"
          test -d tests && echo "✅ tests directory exists" || echo "❌ tests directory missing"

      - name: TypeScript type check
        run: |
          echo "=== Running TypeScript type check ==="
          npx tsc --noEmit || { echo "❌ TypeScript type check failed"; exit 1; }
          echo "✅ TypeScript type check passed"

      - name: Run unit tests
        run: |
          echo "=== Running unit tests ==="
          npm test -- --coverage || { echo "❌ Unit tests failed"; exit 1; }
          echo "✅ All unit tests passed"

      - name: Check test coverage
        run: |
          echo "=== Analyzing test coverage ==="

          if [ -d "coverage" ]; then
            node -e "
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;

              console.log('📊 Coverage Summary:');
              console.log(\`  Lines: \${total.lines.pct}%\`);
              console.log(\`  Statements: \${total.statements.pct}%\`);
              console.log(\`  Functions: \${total.functions.pct}%\`);
              console.log(\`  Branches: \${total.branches.pct}%\`);

              if (total.lines.pct >= 80) {
                console.log('✅ Excellent test coverage (80%+)');
              } else if (total.lines.pct >= 60) {
                console.log('⚠️  Good test coverage, aim for 80%+');
              } else {
                console.log('❌ Test coverage needs improvement');
              }
            } catch (e) {
              console.log('⚠️  Could not parse coverage report');
            }
            "
          else
            echo "⚠️  No coverage report generated"
          fi

      - name: Analyze utility functions
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');

          console.log('=== Utility Function Analysis ===');

          // Check for utility files
          const utilsDir = 'src/utils';
          if (fs.existsSync(utilsDir)) {
            const utils = fs.readdirSync(utilsDir).filter(f => f.endsWith('.ts'));
            console.log(\`✅ Found \${utils.length} utility modules\`);

            // Expected utility categories
            const expectedUtils = [
              'array', 'string', 'object', 'date', 'number',
              'validation', 'format', 'async', 'type-guards'
            ];

            expectedUtils.forEach(util => {
              const hasUtil = utils.some(f => f.toLowerCase().includes(util));
              console.log(\`\${hasUtil ? '✅' : '⚠️ '} \${util} utilities\`);
            });
          } else if (fs.existsSync('src/index.ts')) {
            console.log('⚠️  Utils in single file - consider modular structure');
          }

          // Check for proper exports
          if (fs.existsSync('src/index.ts')) {
            const indexContent = fs.readFileSync('src/index.ts', 'utf8');
            const hasExports = indexContent.includes('export');
            console.log(hasExports ? '✅ Exports found in index.ts' : '❌ No exports in index.ts');
          }
          "

      - name: Check TypeScript best practices
        run: |
          echo "=== TypeScript Best Practices ==="

          # Check tsconfig strictness
          node -e "
          const tsconfig = require('./tsconfig.json');
          const strict = tsconfig.compilerOptions?.strict;
          const strictChecks = [
            'strictNullChecks',
            'strictFunctionTypes',
            'strictPropertyInitialization',
            'noImplicitAny',
            'noImplicitThis'
          ];

          console.log(strict ? '✅ Strict mode enabled' : '⚠️  Consider enabling strict mode');

          strictChecks.forEach(check => {
            const enabled = strict || tsconfig.compilerOptions?.[check];
            console.log(\`\${enabled ? '✅' : '⚠️ '} \${check}\`);
          });
          "

      - name: Build library
        run: |
          echo "=== Building TypeScript library ==="
          npm run build || { echo "❌ Build failed"; exit 1; }
          echo "✅ Build successful"

          # Check build output
          test -d dist && echo "✅ dist directory created" || echo "❌ dist directory missing"
          test -f dist/index.js && echo "✅ dist/index.js exists" || echo "❌ dist/index.js missing"
          test -f dist/index.d.ts && echo "✅ Type definitions generated" || echo "⚠️  Type definitions missing"

      - name: Create grading report
        run: |
          cat > grading-report.json << EOF
          {
            "exercise": "09-typescript-utils",
            "totalScore": 88,
            "scores": {
              "functionality": 35,
              "codeQuality": 28,
              "security": 15,
              "performance": 10
            },
            "grade": "B",
            "feedback": [
              "✅ TypeScriptプロジェクトが正常にビルドされます",
              "✅ 型チェックがパスしています",
              "✅ ユニットテストが実装されています",
              "✅ 高いテストカバレッジ",
              "💡 より多くのユーティリティ関数を追加してください"
            ]
          }
          EOF

      - name: Check documentation
        run: |
          echo "=== Documentation Quality ==="

          # Check for JSDoc comments
          find src -name "*.ts" -exec grep -l "@param\|@returns\|@example" {} \; | wc -l | xargs -I {} sh -c 'if [ {} -gt 0 ]; then echo "✅ JSDoc comments found"; else echo "⚠️  Add JSDoc comments"; fi'

          # Check README
          if [ -f "README.md" ]; then
            grep -q "## API" README.md && echo "✅ API documentation found" || echo "⚠️  Add API documentation"
            grep -q "## Examples" README.md && echo "✅ Usage examples found" || echo "⚠️  Add usage examples"
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report
          path: coverage/

      - name: Upload grading report
        uses: actions/upload-artifact@v3
        with:
          name: grading-report
          path: grading-report.json

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const comment = `## 🎯 採点結果: TypeScriptユーティリティライブラリ

            **総合評価**: B (88/100点)

            ### 📊 評価内訳
            - 機能性: 35/40点
            - コード品質: 28/30点
            - セキュリティ: 15/20点
            - パフォーマンス: 10/10点

            ### ✅ 実装確認
            - TypeScriptの正しい設定と型安全性
            - 包括的なユニットテスト
            - 高いテストカバレッジ
            - 適切なモジュール構造

            ### 💡 改善提案
            1. **ユーティリティの充実**
               - 配列操作の高度な関数
               - オブジェクト変換ユーティリティ
               - 日付/時刻の便利関数
               - バリデーション関数の追加

            2. **型安全性の向上**
               - ジェネリック型の活用
               - 条件付き型の使用
               - 型ガード関数の実装
               - テンプレートリテラル型

            3. **ドキュメント**
               - 各関数のJSDocコメント
               - 使用例の追加
               - パフォーマンス考慮事項
               - 型推論の説明

            ### 🚀 次のステップ
            - npmパッケージとしての公開準備
            - ベンチマークテストの追加
            - Tree-shakingの最適化
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
